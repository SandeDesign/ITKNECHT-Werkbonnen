import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

// Firebase Cloud Messaging imports
importScripts('https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/9.6.1/firebase-messaging-compat.js');

clientsClaim();

// Firebase configuratie
firebase.initializeApp({
  apiKey: "AIzaSyDWjTYxXAXkvG7F-zrhrI6JFDGCeUql0D8",
  authDomain: "it-knecht.firebaseapp.com",
  projectId: "it-knecht",
  storageBucket: "it-knecht.firebasestorage.app",
  messagingSenderId: "26567510400",
  appId: "1:26567510400:web:bdd398c4f59df9e91ad965"
});

const messaging = firebase.messaging();

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Firebase Cloud Messaging - Achtergrond berichten afhandelen
messaging.onBackgroundMessage((payload) => {
  console.log('[service-worker.js] Received background message ', payload);
  
  const notificationTitle = payload.notification.title;
  const notificationOptions = {
    body: payload.notification.body,
    icon: '/icon-192.png',
    badge: '/icon-192.png',
    data: payload.data
  };
  
  self.registration.showNotification(notificationTitle, notificationOptions);
});

// Klik op notificatie afhandelen
self.addEventListener('notificationclick', (event) => {
  console.log('[service-worker.js] Notification click: ', event);
  
  event.notification.close();
  
  // Navigeer naar de juiste pagina op basis van de data in de notificatie
  const urlToOpen = event.notification.data?.url || '/dashboard';
  
  event.waitUntil(
    clients.matchAll({
      type: 'window',
      includeUncontrolled: true
    })
    .then((windowClients) => {
      // Controleer of er al een venster open is
      for (let i = 0; i < windowClients.length; i++) {
        const client = windowClients[i];
        if (client.url.includes(urlToOpen) && 'focus' in client) {
          return client.focus();
        }
      }
      
      // Als er geen venster open is, open een nieuw venster
      if (clients.openWindow) {
        return clients.openWindow(urlToOpen);
      }
    })
  );
});